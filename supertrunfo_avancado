#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

#define TOTAL_CIDADES 4

typedef struct {
    int codigo;
    char nome[50];
    char estado[50];
    long populacao;
    double pib;
    double area;
    int pontos_turisticos;
    double densidade_populacional;
    double pib_per_capita;
    int usada; // para evitar repeti√ß√£o
} Cidade;

void calcular_derivados(Cidade *c) {
    c->densidade_populacional = c->populacao / c->area;
    c->pib_per_capita = c->pib / c->populacao;
}

void mostrar_cidade(Cidade c) {
    printf("\n---- %s (%s) ----\n", c.nome, c.estado);
    printf("C√≥digo: %d\n", c.codigo);
    printf("Popula√ß√£o: %ld\n", c.populacao);
    printf("PIB: R$ %.2f bilh√µes\n", c.pib / 1e9);
    printf("√Årea: %.3f km¬≤\n", c.area);
    printf("Pontos tur√≠sticos: %d\n", c.pontos_turisticos);
    printf("Densidade populacional: %.2f hab/km¬≤\n", c.densidade_populacional);
    printf("PIB per capita: R$ %.2f\n", c.pib_per_capita);
}

int comparar(Cidade c1, Cidade c2, int atributo) {
    double v1, v2;

    switch (atributo) {
        case 1: v1 = c1.populacao; v2 = c2.populacao; break;
        case 2: v1 = c1.pib; v2 = c2.pib; break;
        case 3: v1 = c1.area; v2 = c2.area; break;
        case 4: v1 = c1.pontos_turisticos; v2 = c2.pontos_turisticos; break;
        case 5: v1 = c1.densidade_populacional; v2 = c2.densidade_populacional; break;
        case 6: v1 = c1.pib_per_capita; v2 = c2.pib_per_capita; break;
        default: return -1;
    }

    if (v1 > v2) return 1;
    else if (v2 > v1) return 2;
    else return 0;
}

// Escolhe uma carta aleat√≥ria ainda n√£o usada
int sortear_cidade(Cidade cidades[], int usado[]) {
    int i;
    do {
        i = rand() % TOTAL_CIDADES;
    } while (usado[i]);
    usado[i] = 1;
    return i;
}

int main() {
    srand(time(NULL));

    Cidade cidades[TOTAL_CIDADES] = {
        {100, "Porto Alegre", "Rio Grande do Sul", 11229915, 706820000000.0, 281730.0, 10},
        {200, "Recife", "Pernambuco", 9539029, 254900000000.0, 98067.879, 8},
        {300, "S√£o Paulo", "S√£o Paulo", 12300000, 760000000000.0, 1521.11, 15},
        {400, "Salvador", "Bahia", 2886698, 67000000000.0, 693.8, 12}
    };

    for (int i = 0; i < TOTAL_CIDADES; i++) {
        calcular_derivados(&cidades[i]);
    }

    int usados1[TOTAL_CIDADES] = {0}, usados2[TOTAL_CIDADES] = {0};
    int pontos1 = 0, pontos2 = 0;

    int rodadas = TOTAL_CIDADES;

    printf("=== Super Trunfo de Cidades: Modo Avan√ßado ===\n");

    for (int r = 1; r <= rodadas; r++) {
        printf("\n===== Rodada %d =====\n", r);

        int i1 = sortear_cidade(cidades, usados1);
        int i2 = sortear_cidade(cidades, usados2);

        printf("\nJogador 1 recebeu:");
        mostrar_cidade(cidades[i1]);

        printf("\nJogador 2 recebeu:");
        mostrar_cidade(cidades[i2]);

        int escolha;
        printf("\nJogador 1, escolha o atributo para competir:\n");
        printf("1 - Popula√ß√£o\n2 - PIB\n3 - √Årea\n4 - Pontos Tur√≠sticos\n5 - Densidade Populacional\n6 - PIB per capita\n");
        printf("Digite sua escolha: ");
        scanf("%d", &escolha);

        int resultado = comparar(cidades[i1], cidades[i2], escolha);

        printf("\nResultado:\n");
        if (resultado == 1) {
            printf("‚úÖ Jogador 1 venceu a rodada!\n");
            pontos1++;
        } else if (resultado == 2) {
            printf("‚úÖ Jogador 2 venceu a rodada!\n");
            pontos2++;
        } else {
            printf("ü§ù Empate!\n");
        }
    }

    printf("\n=== Resultado Final ===\n");
    printf("Jogador 1: %d ponto(s)\n", pontos1);
    printf("Jogador 2: %d ponto(s)\n", pontos2);

    if (pontos1 > pontos2)
        printf("üèÜ Vencedor: Jogador 1!\n");
    else if (pontos2 > pontos1)
        printf("üèÜ Vencedor: Jogador 2!\n");
    else
        printf("ü§ù O jogo terminou empatado!\n");

    return 0;
}
